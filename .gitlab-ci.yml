variables:
  GIT_SSL_NO_VERIFY: "1"

before_script:
  - python .gitlab/fix-submodules.py
  - git submodule sync --recursive
  - git submodule update --init --recursive
  - git checkout .gitmodules

############################################################
# Validation via Pipelines (hadrian)
############################################################

.validate-hadrian:
  script:
    - bash .circleci/prepare-system.sh
    - if [[ -d ./cabal-cache ]]; then cp -R ./.cabal-cache ~/.cabal-cache; fi
    - sudo chown ghc:ghc -R .
    - ./boot
    - ./configure
    - hadrian/build.cabal.sh -j`mk/detect-cpu-count.sh`
  cache:
    key: hadrian
    paths:
      - cabal-cache
  image: ghcci/x86_64-linux:0.0.8

validate-x86_64-linux-hadrian:
  extends: .validate-hadrian

############################################################
# Validation via Pipelines (make)
############################################################

.validate:
  script:
    - bash .circleci/prepare-system.sh
    - sudo chown ghc:ghc -R .
    - make clean || true
    - ./boot
    - ./configure
    - |
      THREADS=`mk/detect-cpu-count.sh`
      make V=0 -j$THREADS HADDOCK_DOCS=NO
    - |
      make binary-dist TAR_COMP_OPTS="-1"
      mv ghc-*.tar.xz ghc.tar.xz
    - |
      THREADS=`mk/detect-cpu-count.sh`
      make test THREADS=$THREADS JUNIT_FILE=../../junit.xml
  image: ghcci/x86_64-linux:0.0.8
  artifacts:
    when: always
    reports:
      junit: junit.xml
    paths:
      - ghc.tar.xz
      - junit.xml

validate-x86_64-linux:
  extends: .validate
  before_script:
    - |
      echo 'HADDOCK_DOCS       = NO' >> mk/build.mk
      echo 'BUILD_SPHINX_HTML  = NO' >> mk/build.mk
      echo 'BUILD_SPHINX_PDF   = NO' >> mk/build.mk

############################################################
# Validation via Pipelines (make, Windows)
############################################################

validate-x86_64-windows:
  variables:
    GHC_VERSION: "8.6.2"
  script:
    - bash -e .gitlab/win32-init.sh
    - |
      set MSYSTEM=MINGW64
      python boot
      bash -c './configure --with-ghc=`pwd`/ghc-$GHC_VERSION/bin/ghc --enable-tarballs-autodownload HappyCmd=`pwd`/ghc-$GHC_VERSION/bin/happy AlexCmd=`pwd`/ghc-$GHC_VERSION/bin/alex'
    - bash -c "PATH=`pwd`/ghc-$GHC_VERSION/bin:$PATH hadrian/build.cabal.sh -j`mk/detect-cpu-count.sh` --flavour=Quick"
    - bash -c "PATH=`pwd`/ghc-$GHC_VERSION/bin:$PATH hadrian/build.cabal.sh binary-dist"
    - mv ghc-*.tar.xz ghc.tar.xz
    - bash -c 'make V=0 -j`mk/detect-cpu-count.sh` HADDOCK_DOCS=NO test THREADS=$THREADS JUNIT_FILE=../../junit.xml'
    - cp -Rf $APPDATA/cabal cabal-cache
  cache:
    key: windows
    paths:
      - cabal-cache
      - ghc-8.6.2
      - ghc-tarballs


############################################################
# Validation via CircleCI
############################################################

.circleci:
  image: ghcci/x86_64-linux:0.0.8
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    #- git config --global user.email "user@example.com"
    #- git config --global user.name "User name"
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    #- sudo apt-get update -y
    #- sudo apt-get install jq wget -y
    #- 'which ssh-agent || sudo apt-get install openssh-client -y'
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556

    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  artifacts:
    when: always
    reports:
      junit: junit.xml
    paths:
      - ghc.tar.xz
      - junit.xml

# All validation jobs keep the bindists and test results are artifacts,
# when we get far enough to generate them.
#
# This requires updating the maximum artifacts size limit in Gitlab to
# something like 200MB.

circleci-validate-x86_64-linux:
  extends: .circleci
  script: ".gitlab/circle-ci-job.sh validate-x86_64-linux"

circleci-validate-i386-linux:
  extends: .circleci
  script: ".gitlab/circle-ci-job.sh validate-i386-linux"

# circleci-validate-x86_64-freebsd:
#   extends: .circleci
#   script: ".gitlab/circle-ci-job.sh validate-x86_64-freebsd"

circleci-validate-x86_64-darwin:
  extends: .circleci
  script: ".gitlab/circle-ci-job.sh validate-x86_64-darwin"
